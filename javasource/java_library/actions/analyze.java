// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package java_library.actions;

import java.util.Stack;
import com.mendix.core.Core;
import com.mendix.core.actionmanagement.CoreAction;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.ISession;
import com.mendix.webui.CustomJavaAction;

/**
 * Analyzes the call stack of the microflow
 */
public class analyze extends CustomJavaAction<Boolean>
{
	public analyze(IContext context)
	{
		super(context);
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		if( _logNode.isDebugEnabled() ) {
			IContext context = this.getContext();
			ISession session = context.getSession();
			
			logInfo( " Analyzing " + ( context.isSudo() ? "Sudo Context" : "Regular Context")
					+ " - Running in transaction: " + context.isInTransaction() );
			
			String stackStr = "";
			Stack<CoreAction<?>> stack = context.getActionStack();
			for( int i = 0; i < stack.size(); i++) {
				CoreAction<?> action = stack.get(i);
				for( int j =0; j<i; j++) 
					stackStr += "   ";
				
//				if( action instanceof ja ) {
//					ja jaction = (ja) action;
//					jaction.getException();
//				}
				stackStr += " - [" + action.getContext().getExecutionId() + "] " + action.getMetaInfo() + " SA: " + action.isSystemAction() + " State: " + action.getState() +
						"\r\n";
			}
			logInfo("Stack : \r\n" + stackStr);
		}
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "analyze";
	}

	// BEGIN EXTRA CODE
	private static ILogNode _logNode = Core.getLogger("MFDetails");
	private void logInfo( String msg ) {
		_logNode.debug( "[" + getContext().getExecutionId() + "] - " + msg);
	}
	// END EXTRA CODE
}
